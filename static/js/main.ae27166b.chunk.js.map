{"version":3,"sources":["components/ContactFilter/ContactFilter.module.css","App.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/ContactListItem/ContactListItem.js","components/ContactFilter/ContactFilter.js","App.js","index.js","components/ContactListItem/ContactsListItem.module.css"],"names":["module","exports","Form","props","state","name","number","handleInput","bind","handleSubmit","this","setState","e","currentTarget","value","preventDefault","id","shortid","generate","onSubmit","resetInput","className","s","form","contactFormLabel","contactFormInput","onChange","type","pattern","title","required","contactAddButton","Component","ContactsList","children","ContactsListItem","contacts","removeContact","length","contactListItem","map","contact","contactListName","contactListNumber","removeContactBtn","onClick","Filter","filter","reset","filterFormWrapper","htmlFor","filterLabel","filterInput","placeholder","onBlur","App","addNewContact","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","useuExist","toLocaleLowerCase","alert","newContact","console","log","onRemove","filtered","lowLettersNames","includes","contactSection","onFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,kBAAoB,yCAAyC,YAAc,mCAAmC,YAAc,qC,mBCA9ID,EAAOC,QAAU,CAAC,eAAiB,8B,uCCAnCD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,iBAAmB,sCAAsC,iBAAmB,sCAAsC,iBAAmB,wC,gMCoEzKC,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,IAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,8CAUnB,WACEE,KAAKC,SAAS,CAAEN,KAAM,GAAIC,OAAQ,O,yBAEpC,SAAYM,GACV,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACdJ,KAAKC,SAAL,eAAiBN,EAAOS,M,0BAE1B,SAAaF,GACXA,EAAEG,iBAEF,MAAyBL,KAAKN,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACRU,EAAKC,IAAQC,WACnBR,KAAKP,MAAMgB,SAASd,EAAMC,EAAQU,GAClCN,KAAKU,e,oBAEP,WACE,OACE,uBAAMC,UAAWC,IAAEC,KAAMJ,SAAUT,KAAKD,aAAxC,UACE,wBAAOY,UAAWC,IAAEE,iBAApB,iBAEE,uBACEH,UAAWC,IAAEG,iBACbC,SAAUhB,KAAKH,YACfoB,KAAK,OACLtB,KAAK,OACLS,MAAOJ,KAAKN,MAAMC,KAClBuB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOT,UAAWC,IAAEE,iBAApB,kBAEE,uBACEH,UAAWC,IAAEG,iBACbC,SAAUhB,KAAKH,YACfoB,KAAK,MACLb,MAAOJ,KAAKN,MAAME,OAClBD,KAAK,SACLuB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQT,UAAWC,IAAES,iBAAkBJ,KAAK,SAA5C,gC,GAvDWK,aCUJC,EAZM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,qCACE,2CACA,oBAAIb,UAAU,eAAd,SAA8Ba,Q,gBC2BrBC,EA7BU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAwB,IAApBD,EAASE,OAET,oBAAIjB,UAAWC,IAAEiB,gBAAjB,SACE,qDAIGH,EAASI,KAAI,SAAAC,GAAO,OACzB,qBAAIpB,UAAWC,IAAEiB,gBAAjB,UACE,mBAAGlB,UAAWC,IAAEoB,gBAAhB,SAAkCD,EAAQpC,OAC1C,mBAAGgB,UAAWC,IAAEqB,kBAAhB,SAAoCF,EAAQnC,SAC5C,wBACEe,UAAWC,IAAEsB,iBACbjB,KAAK,SACLkB,QAAS,WACPR,EAAcI,EAAQzB,KAJ1B,sBAHqCC,IAAQC,gB,iBCetC4B,EAzBA,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQxC,EAAyB,EAAzBA,YAAayC,EAAY,EAAZA,MACrC,OACE,sBAAK3B,UAAWC,IAAE2B,kBAAlB,UACE,uBAAOC,QAAQ,SAAS7B,UAAWC,IAAE6B,YAArC,mCAGA,uBACE9B,UAAWC,IAAE8B,YACbC,YAAY,qBACZrC,GAAG,SACHsC,OAAQN,EACRtB,SAAUnB,EACVF,KAAK,SACLsB,KAAK,OACLb,MAAOiC,QCiFAQ,E,kDA1Fb,aAAe,IAAD,8BACZ,gBACKnD,MAAQ,CACXgC,SAAU,GACVW,OAAQ,IAGV,EAAKxC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKY,WAAa,EAAKA,WAAWZ,KAAhB,gBAClB,EAAKgD,cAAgB,EAAKA,cAAchD,KAAnB,gBACrB,EAAK6B,cAAgB,EAAKA,cAAc7B,KAAnB,gBAVT,E,qDAYd,WACEE,KAAKC,SAAS,CAAEyB,SAAUqB,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,O,gCAG5E,SAAmBC,EAAWC,GACxBA,EAAU1B,SAASE,SAAW5B,KAAKN,MAAMgC,SAASE,QACpDqB,aAAaI,QAAQ,WAAYN,KAAKO,UAAUtD,KAAKN,MAAMgC,a,yBAG/D,SAAYxB,GACV,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACdJ,KAAKC,SAAL,eAAiBN,EAAOS,M,wBAE1B,WACEJ,KAAKC,SAAS,CAAEoC,OAAQ,O,2BAE1B,SAAc1C,EAAMC,EAAQU,GAC1B,IAAIiD,GAAY,EAUhB,GATAvD,KAAKN,MAAMgC,SAASI,KAAI,SAAAC,GAEpBpC,EAAK6D,sBAAwBzB,EAAQpC,KAAK6D,qBAC1C5D,IAAWmC,EAAQnC,SAEnB6D,MAAM,qCACNF,GAAY,OAGXA,EAAL,CACE,IAAMG,EAAa,CAAE/D,OAAMC,SAAQU,MACnCN,KAAKC,UAAS,gBAAGyB,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAEgC,GAAH,mBAAkBhC,W,2BAOhC,SAAcpB,GACZqD,QAAQC,IAAItD,GACZ,IAAMuD,EAAW7D,KAAKN,MAAMgC,SAASW,QAAO,SAAAN,GAAO,OAAIA,EAAQzB,KAAOA,KACtEqD,QAAQC,IAAIC,GACZ7D,KAAKC,SAAS,CAAEyB,SAAS,YAAKmC,O,oBAGhC,WACE,IAAIC,EACJ,GAAI9D,KAAKN,MAAM2C,OAAOT,OAAS,EAAG,CAChC,IAAMmC,EAAkB/D,KAAKN,MAAM2C,OAAOmB,oBAC1CM,EAAW9D,KAAKN,MAAMgC,SAASW,QAAO,SAAAN,GAAO,OAC3CA,EAAQpC,KAAK6D,oBAAoBQ,SAASD,WAG5CD,EAAW9D,KAAKN,MAAMgC,SAGxB,OACE,sBAAKf,UAAWC,IAAEqD,eAAlB,UACE,2CAEA,cAAC,EAAD,CACExD,SAAUT,KAAK8C,cACfpB,SAAU1B,KAAKN,MAAMgC,SACrB3B,aAAcC,KAAKD,eAErB,cAAC,EAAD,CACEuC,MAAOtC,KAAKU,WACZ2B,OAAQrC,KAAKN,MAAM2C,OACnBrB,SAAUhB,KAAKkE,SACfrE,YAAaG,KAAKH,cAEpB,cAAC,EAAD,UACE,cAAC,EAAD,CAAkB6B,SAAUoC,EAAUnC,cAAe3B,KAAK2B,yB,GApFlDL,aCFlB6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BjF,EAAOC,QAAU,CAAC,gBAAkB,0CAA0C,gBAAkB,0CAA0C,kBAAoB,4CAA4C,iBAAmB,8C","file":"static/js/main.ae27166b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterFormWrapper\":\"ContactFilter_filterFormWrapper__1j5Sh\",\"filterLabel\":\"ContactFilter_filterLabel__19qep\",\"filterInput\":\"ContactFilter_filterInput__gceBP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactSection\":\"App_contactSection__2w1j-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1yt47\",\"contactFormLabel\":\"ContactForm_contactFormLabel__1CDoH\",\"contactFormInput\":\"ContactForm_contactFormInput__10AsI\",\"contactAddButton\":\"ContactForm_contactAddButton__3mZ-1\"};","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport s from './ContactForm.module.css';\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      number: '',\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  resetInput() {\r\n    this.setState({ name: '', number: '' });\r\n  }\r\n  handleInput(e) {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  }\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const id = shortid.generate();\r\n    this.props.onSubmit(name, number, id);\r\n    this.resetInput();\r\n  }\r\n  render() {\r\n    return (\r\n      <form className={s.form} onSubmit={this.handleSubmit}>\r\n        <label className={s.contactFormLabel}>\r\n          Name\r\n          <input\r\n            className={s.contactFormInput}\r\n            onChange={this.handleInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.contactFormLabel}>\r\n          Phone\r\n          <input\r\n            className={s.contactFormInput}\r\n            onChange={this.handleInput}\r\n            type=\"tel\"\r\n            value={this.state.number}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={s.contactAddButton} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\nexport default Form;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactsList = ({ children }) => {\r\n  return (\r\n    <>\r\n      <h2>Contacts:</h2>\r\n      <ul className=\"contact-list\">{children}</ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\nexport default ContactsList;\r\n","import shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './ContactsListItem.module.css';\r\nconst ContactsListItem = ({ contacts, removeContact }) => {\r\n  if (contacts.length === 0) {\r\n    return (\r\n      <li className={s.contactListItem}>\r\n        <h4>The list is empty</h4>\r\n      </li>\r\n    );\r\n  } else {\r\n    return contacts.map(contact => (\r\n      <li className={s.contactListItem} key={shortid.generate()}>\r\n        <p className={s.contactListName}>{contact.name}</p>\r\n        <p className={s.contactListNumber}>{contact.number}</p>\r\n        <button\r\n          className={s.removeContactBtn}\r\n          type=\"button\"\r\n          onClick={() => {\r\n            removeContact(contact.id);\r\n          }}\r\n        >\r\n          Remove\r\n        </button>\r\n      </li>\r\n    ));\r\n  }\r\n};\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.array,\r\n};\r\nexport default ContactsListItem;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactFilter.module.css';\r\n\r\nconst Filter = ({ filter, handleInput, reset }) => {\r\n  return (\r\n    <div className={s.filterFormWrapper}>\r\n      <label htmlFor=\"filter\" className={s.filterLabel}>\r\n        Find contacts by name\r\n      </label>\r\n      <input\r\n        className={s.filterInput}\r\n        placeholder=\"Input contact name\"\r\n        id=\"filter\"\r\n        onBlur={reset}\r\n        onChange={handleInput}\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  handleInput: PropTypes.func.isRequired,\r\n  reset: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport s from './App.module.css';\n\nimport Form from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport ContactsListItem from './components/ContactListItem/ContactListItem';\nimport Filter from './components/ContactFilter/ContactFilter';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      contacts: [],\n      filter: '',\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.resetInput = this.resetInput.bind(this);\n    this.addNewContact = this.addNewContact.bind(this);\n    this.removeContact = this.removeContact.bind(this);\n  }\n  componentDidMount() {\n    this.setState({ contacts: JSON.parse(localStorage.getItem('contacts')) || [] });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts.length !== this.state.contacts.length) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n  handleInput(e) {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  }\n  resetInput() {\n    this.setState({ filter: '' });\n  }\n  addNewContact(name, number, id) {\n    let useuExist = false;\n    this.state.contacts.map(contact => {\n      if (\n        name.toLocaleLowerCase() === contact.name.toLocaleLowerCase() ||\n        number === contact.number\n      ) {\n        alert('Such name or number alredy exist!');\n        useuExist = true;\n      }\n    });\n    if (!useuExist) {\n      const newContact = { name, number, id };\n      this.setState(({ contacts }) => ({\n        contacts: [newContact, ...contacts],\n      }));\n    } else {\n      return;\n    }\n  }\n\n  removeContact(id) {\n    console.log(id);\n    const onRemove = this.state.contacts.filter(contact => contact.id !== id);\n    console.log(onRemove);\n    this.setState({ contacts: [...onRemove] });\n  }\n\n  render() {\n    let filtered;\n    if (this.state.filter.length > 0) {\n      const lowLettersNames = this.state.filter.toLocaleLowerCase();\n      filtered = this.state.contacts.filter(contact =>\n        contact.name.toLocaleLowerCase().includes(lowLettersNames),\n      );\n    } else {\n      filtered = this.state.contacts;\n    }\n\n    return (\n      <div className={s.contactSection}>\n        <h1>Phonebook</h1>\n\n        <Form\n          onSubmit={this.addNewContact}\n          contacts={this.state.contacts}\n          handleSubmit={this.handleSubmit}\n        />\n        <Filter\n          reset={this.resetInput}\n          filter={this.state.filter}\n          onChange={this.onFilter}\n          handleInput={this.handleInput}\n        />\n        <ContactsList>\n          <ContactsListItem contacts={filtered} removeContact={this.removeContact} />\n        </ContactsList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"ContactsListItem_contactListItem__24r5X\",\"contactListName\":\"ContactsListItem_contactListName__3cK8K\",\"contactListNumber\":\"ContactsListItem_contactListNumber__28BDH\",\"removeContactBtn\":\"ContactsListItem_removeContactBtn__3SwgR\"};"],"sourceRoot":""}